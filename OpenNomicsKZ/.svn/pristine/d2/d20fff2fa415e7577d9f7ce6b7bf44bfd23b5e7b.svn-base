package opennomics.com.main.receipt.service;

import java.util.List;
import java.util.Map;

import opennomics.com.main.receipt.domain.ReceiptVO;
import opennomics.com.main.user.domain.UserVO;

import org.json.simple.JSONObject;

/**
 * 접수현황과 관련된 데이터를 처리한다.
 * 
 * @author SG.Lee
 * @Date 2016.05
 * */
public interface ReceiptService {

	/**
	 * 모든 접수목록 조회를 요청한다.
	 * 
	 * @author SG.Lee
	 * @data 2016.04
	 * @param pageNum
	 *            - 페이지 번호
	 * @return List<ReceiptVO>
	 */
	List<ReceiptVO> selectAllReceiptList(int pageNum) throws Exception;

	/**
	 * 모든 접수목록수 조회를 요청한다.
	 * 
	 * @author SG.Lee
	 * @data 2016.04
	 * @return int
	 */
	int selectAllReceiptListCount() throws Exception;

	/**
	 * 접수번호에 해당하는 접수정보를 조회를 요청한다.
	 * 
	 * @author SG.Lee
	 * @data 2016.04
	 * @param rid
	 *            - 접수번호
	 * @return ReceiptVO
	 */
	ReceiptVO selectReceipt(int rid) throws Exception;

	/**
	 * 부의장이 보는 접수목록 조회를 요청한다.
	 * 
	 * @author SG.Lee
	 * @data 2016.04
	 * @param pageNum
	 *            - 페이지 번호
	 * @return List<ReceiptVO>
	 */
	List<ReceiptVO> selectChairReceiptList(int pageNum) throws Exception;

	/**
	 * 부의장이 보는 접수목록수 조회를 요청한다.
	 * 
	 * @author SG.Lee
	 * @data 2016.04
	 * @return int
	 */
	int selectChairReceiptListCount() throws Exception;

	/**
	 * 조건(접수상태)에 따르는 접수목록 조회를 요청한다.
	 * 
	 * @author SG.Lee
	 * @data 2016.04
	 * @param stts
	 *            - 접수상태
	 * @param pageNum
	 *            - 페이지 번호
	 * @return List<ReceiptVO>
	 */
	List<ReceiptVO> selectReceiptList(String stts, int pageNum) throws Exception;

	/**
	 * 조건(접수상태)에 따르는 접수목록수 조회를 요청한다.
	 * 
	 * @author SG.Lee
	 * @data 2016.04
	 * @param stts
	 *            - 접수상태
	 * @return int
	 */
	int selectReceiptListCount(String stts) throws Exception;

	/**
	 * 검수승인에 대한 DB처리를 한다.
	 * 
	 * @author SG.Lee
	 * @data 2016.04
	 * @param updateMap
	 *            - 업데이트 정보
	 */
	void updateApprovalRequest(Map<String, Object> updateMap) throws Exception;

	/**
	 * 최종승인에 대한 DB처리를 한다.
	 * 
	 * @author SG.Lee
	 * @data 2016.04
	 * @param updateMap
	 *            - 업데이트 정보
	 */
	void updateLastApprovalRequest(Map<String, Object> updateMap) throws Exception;

	/**
	 * 최종거절을 요청한다.
	 * 
	 * @author SG.Lee
	 * @data 2016.04
	 * @param updateMap
	 *            - 업데이트 정보
	 */
	void updateLastDisApprovalRequest(Map<String, Object> updateMap) throws Exception;

	/**
	 * 최종거절을 요청한다.
	 * 
	 * @author SG.Lee
	 * @data 2016.04
	 * @param user - 유저정보
	 * @param rid - 접수번호
	 * @param tname - 테이블이름
	 * @param attInfo - 속성정보
	 * @param layer - 레이어정보
	 * @param errList - 오류리포트
	 * @return boolean
	 */
	boolean approvalRequest(UserVO user, int rid, String tname, Map<String, String> attInfo, JSONObject layer, List<Map<String, Object>> errList)
			throws Exception;
}
